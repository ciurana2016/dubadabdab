Entonces, cojemes el get, descargamos el .js con python,
lo leemos, sacamos el PID,
y creamos una huella digital basandonos en su propio script,
todo es estatico, lo unico que veo es el getTime que cambiara.
! ah, y el get time es parte del "proof"
"proof":"20:1574273219940:lZ1jAbFYGILxqFQ5ln7x",
el numero entre los dos : es getTime() 
por ahora se que  proof = Y:(new Date).getTime():random_str_len_20

random_str_len_20 =             function t(e) {
                for (var t = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", r = "", n = 0; e > n; ++n) r += t.substr(Math.floor(Math.random() * t.length), 1);
                return r
            }

TODO> hacer varias peticiones a ver el p= que cambios tiene haha y otras variables
TODO> poco mas creo,    aah si de donde sale ese 20 de delante xd

Antes de mirarlo de verdad, el 20: determina len() de :random >?
Vale no lol ejemplo_huella_02 empieza con 14e:

Cojer un par mas de huellas a ver

Entre varias huellas solo hay 2 diferencias en el mismo navegador.
    1. proof, la parte de delante (sacar eso) las otras partes son 
        time y random string asi que con el pito lo saco
    2. ['fp2']['devices']['data'] del 0 al 5, deviceId y groupId,
    PEROOO, esperoa en un el huella_02 
        "devices": {
            "count": 0, "err": "unsupported-enumeratedevices"
        }

        navigator.mediaDevices.enumerateDevices
        sale de alli, parece ser completamente ids aleatorios

yay ahora nos queda copiar la lista de peticiones y respuestas de Burp, ya sabemos
que tenemos que enviar en cada una. (mas o menos a ver que pasa ahha)

Antes de nada vamos a pasar el login que queremos hacer por Burp y luego lo recreamosxd.

